geom_line( color="#69b3a2", size=2, alpha=0.9, linetype=2) +
theme_ipsum() +
ggtitle("Line Chart of y upon x")
library(ggplot2)
ggplot(data, aes(x=x, y=y)) +
geom_line( color="#69b3a2", size=2, alpha=0.9, linetype=2) +
ggtitle("Line Chart of y upon x")
library(ggplot2)
ggplot(data, aes(x=x, y=y)) +
geom_line( color="#69b3a2") +
ggtitle("Line Chart of y upon x")
library(ggplot2)
ggplot(data, aes(x=x, y=y)) +
geom_line( color="#69b3a2") +
ggtitle("Line Chart of y upon x", x ="x", y ="y")
library(ggplot2)
ggplot(data, aes(x=x, y=y)) +
geom_line( color="#69b3a2") +
ggtitle("Line Chart of y upon x")
library(ggplot2)
ggplot(data, aes(x=x1, y=y)) +
geom_line( color="#69b3a2") +
ggtitle("Line Chart of y upon x")
# Calculate the variance, standard deviation
variance_x = var(data[,c("x")])
print(variance_x)
# Calculate all variances
variances = apply(data, 2, var)
print(variances)
library(ggplot2)
ggplot(data, aes(x=x, y=y)) +
geom_line( color="#69b3a2") +
ggtitle("Line Chart of y upon x")
install.packages("corrplot")
#Visualize heatmap among x, x2, x3, y
library(corrplot)
cor_matrix = cor(data)
corrplot(cor_matrix, method = 'number')
#Visualize heatmap among x, x2, x3, y
library(corrplot)
cor_matrix = cor(data)
corrplot(cor_matrix, method = 'color', type ="upper", tl.col = "black", addCoef.col = "black", number.cex = 0.8)
# visualize the distribution for each columns
ggplot(data, aes(x=x, fill=y)) +
geom_histogram(binwidth=.5, alpha=.5, position="identity")
# visualize the distribution for each columns
ggplot(data, aes(x=x, fill=y)) +
geom_histogram(binwidth=.5, alpha=.5, position="identity")
# visualize the distribution for each columns
ggplot(data, aes(x=x, y = y)) +
geom_histogram(binwidth=.5, alpha=.5, position="identity")
# visualize the distribution for each columns
ggplot(data, aes(x=x, fill = y)) +
geom_histogram(binwidth=.5, alpha=.5, position="identity")
# Follow lecture
# Calculate the mean of all columns
means = colMeans(data)
print(means)
# Calculate the variance, standard deviation
variance_x = var(data[,c("x")])
print(variance_x)
# Calculate all variances
variances = apply(data, 2, var)
print(variances)
# visualize the distribution for each columns
ggplot(data, aes(x=x2, fill = y)) +
geom_histogram(binwidth=.5, alpha=.5, position="identity")
# visualize the distribution for each columns
ggplot(data, aes(x=x, fill = y)) +
geom_histogram(binwidth=.5, alpha=.5, position="identity")
# visualize the distribution for each columns
ggplot(data, aes(x=x, fill = y)) +
geom_histogram(binwidth=0.2, alpha=.5, position="identity") +
# visualize the distribution for each columns
ggplot(data, aes(x=x, fill = y)) +
geom_histogram(binwidth=0.2, alpha=.5, position="identity")
# visualize the distribution for each columns
x = ggplot(data, aes(x=x, fill = y)) +
geom_histogram(binwidth=0.2, alpha=.5, position="identity")
x1 = ggplot(data, aes(x=x1, fill = y)) +
geom_histogram(binwidth=0.2, alpha=.5, position="identity")
x2 = ggplot(data, aes(x=x2, fill = y)) +
geom_histogram(binwidth=0.2, alpha=.5, position="identity")
x3 = ggplot(data, aes(x=x3, fill = y)) +
geom_histogram(binwidth=0.2, alpha=.5, position="identity")
y = ggplot(data, aes(x=y, fill = y)) +
geom_histogram(binwidth=0.2, alpha=.5, position="identity")
geom_vline(aes(xintercept = mean(x)),col='red',size=2)+
geom_vline(aes(xintercept = fun.mode(x)),col='blue',size=2)+
# visualize the distribution for each columns
x = ggplot(data, aes(x=x, fill = y)) +
geom_histogram(binwidth=0.2, alpha=.5, position="identity")
x1 = ggplot(data, aes(x=x1, fill = y)) +
geom_histogram(binwidth=0.2, alpha=.5, position="identity")
x2 = ggplot(data, aes(x=x2, fill = y)) +
geom_histogram(binwidth=0.2, alpha=.5, position="identity")
x3 = ggplot(data, aes(x=x3, fill = y)) +
geom_histogram(binwidth=0.2, alpha=.5, position="identity")
y = ggplot(data, aes(x=y, fill = y)) +
geom_histogram(binwidth=0.2, alpha=.5, position="identity")
p%+%
geom_vline(aes(xintercept = mean(x)),col='red',size=2)+
geom_vline(aes(xintercept = fun.mode(x)),col='blue',size=2)+
# visualize the distribution for each columns
x = ggplot(data, aes(x=x, fill = y)) +
geom_histogram(binwidth=0.2, alpha=.5, position="identity")
x1 = ggplot(data, aes(x=x1, fill = y)) +
geom_histogram(binwidth=0.2, alpha=.5, position="identity")
x2 = ggplot(data, aes(x=x2, fill = y)) +
geom_histogram(binwidth=0.2, alpha=.5, position="identity")
x3 = ggplot(data, aes(x=x3, fill = y)) +
geom_histogram(binwidth=0.2, alpha=.5, position="identity")
y = ggplot(data, aes(x=y, fill = y)) +
geom_histogram(binwidth=0.2, alpha=.5, position="identity")
p%+%
geom_vline(aes(xintercept = mean(x)),col='red',size=2)+
geom_vline(aes(xintercept = fun.mode(x)),col='blue',size=2)
# visualize the distribution for each columns
x = ggplot(data, aes(x=x, fill = y)) +
geom_histogram(binwidth=0.2, alpha=.5, position="identity")
x1 = ggplot(data, aes(x=x1, fill = y)) +
geom_histogram(binwidth=0.2, alpha=.5, position="identity")
x2 = ggplot(data, aes(x=x2, fill = y)) +
geom_histogram(binwidth=0.2, alpha=.5, position="identity")
x3 = ggplot(data, aes(x=x3, fill = y)) +
geom_histogram(binwidth=0.2, alpha=.5, position="identity")
y = ggplot(data, aes(x=y, fill = y)) +
geom_histogram(binwidth=0.2, alpha=.5, position="identity")
x%+%
geom_vline(aes(xintercept = mean(x)),col='red',size=2)+
geom_vline(aes(xintercept = fun.mode(x)),col='blue',size=2)
# visualize the distribution for each columns
x = ggplot(data, aes(x=x, fill = y)) +
geom_histogram(binwidth=0.2, alpha=.5, position="identity")
x1 = ggplot(data, aes(x=x1, fill = y)) +
geom_histogram(binwidth=0.2, alpha=.5, position="identity")
x2 = ggplot(data, aes(x=x2, fill = y)) +
geom_histogram(binwidth=0.2, alpha=.5, position="identity")
x3 = ggplot(data, aes(x=x3, fill = y)) +
geom_histogram(binwidth=0.2, alpha=.5, position="identity")
y = ggplot(data, aes(x=y, fill = y)) +
geom_histogram(binwidth=0.2, alpha=.5, position="identity")
x%+%
geom_vline(aes(xintercept = mean(x)),col='red',size=2)
# visualize the distribution for each columns
x = ggplot(data, aes(x=x, fill = y)) +
geom_histogram(binwidth=0.2, alpha=.5, position="identity")
x1 = ggplot(data, aes(x=x1, fill = y)) +
geom_histogram(binwidth=0.2, alpha=.5, position="identity")
x2 = ggplot(data, aes(x=x2, fill = y)) +
geom_histogram(binwidth=0.2, alpha=.5, position="identity")
x3 = ggplot(data, aes(x=x3, fill = y)) +
geom_histogram(binwidth=0.2, alpha=.5, position="identity")
y = ggplot(data, aes(x=y, fill = y)) +
geom_histogram(binwidth=0.2, alpha=.5, position="identity")
x%+%
geom_vline(aes(xintercept = mean(x)),col='red',size=2) +
geom_vline(aes(xintercept = median(x)),col='yellow',size=2)
# visualize the distribution for each columns
x = ggplot(data, aes(x=x, fill = y)) +
geom_histogram(binwidth=0.2, alpha=.5, position="identity")
x1 = ggplot(data, aes(x=x1, fill = y)) +
geom_histogram(binwidth=0.2, alpha=.5, position="identity")
x2 = ggplot(data, aes(x=x2, fill = y)) +
geom_histogram(binwidth=0.2, alpha=.5, position="identity")
x3 = ggplot(data, aes(x=x3, fill = y)) +
geom_histogram(binwidth=0.2, alpha=.5, position="identity")
y = ggplot(data, aes(x=y, fill = y)) +
geom_histogram(binwidth=0.2, alpha=.5, position="identity")
x%+%
geom_vline(aes(xintercept = mean(x)),col='red',size=2) +
geom_vline(aes(xintercept = median(x)),col='yellow',size=2) +
geom_vline(aes(xintercept = mode(x)),col='yellow',size=2)
# visualize the distribution for each columns
x = ggplot(data, aes(x=x, fill = y)) +
geom_histogram(binwidth=0.2, alpha=.5, position="identity")
x1 = ggplot(data, aes(x=x1, fill = y)) +
geom_histogram(binwidth=0.2, alpha=.5, position="identity")
x2 = ggplot(data, aes(x=x2, fill = y)) +
geom_histogram(binwidth=0.2, alpha=.5, position="identity")
x3 = ggplot(data, aes(x=x3, fill = y)) +
geom_histogram(binwidth=0.2, alpha=.5, position="identity")
y = ggplot(data, aes(x=y, fill = y)) +
geom_histogram(binwidth=0.2, alpha=.5, position="identity")
x%+%
geom_vline(aes(xintercept = mean(x)),col='red',size=2) +
geom_vline(aes(xintercept = median(x)),col='yellow',size=2)
install.packages("nycflights13")
library(nycflights13)
flights
library(nycflights13)
flights
filter(flights, month == 1, day == 1)
library(nycflights13)
nycflights13::flights
library(nycflights13)
nycflights13::flights
filter(flights, month == 1, day == 1)
# Follow tutorial
df = data[, c("x", "x3")];
head(df)
x<-df$x
head(x)
xmean <- mean(x,na.rm = TRUE)
xmean
xmedia<- median(x, na.rm = FALSE)
xmedia
# Create the function.
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
v<-x
# Calculate the mode using the user function.
xmode <- getmode(v)
xmode
nycflights13::flights
nycflights13::flights
nycflights13::flights
nycflights13::flights
fl = filter(flights, month = 1)
library(dplyr)
nycflights13::flights
fl = filter(flights, month = 1)
library(dplyr)
nycflights13::flights
filter(flights, month == 11 | month == 12)
# Create the function.
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
v<-x
# Calculate the mode using the user function.
xmode <- getmode(v)
xmode
# Create the function.
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
v<-x
# Calculate the mode using the user function.
xmode <- getmode(v)
xmode
# Follow tutorial
df = data[, c("x", "x3")];
head(df)
x<-df$x
head(x)
xmean <- mean(x,na.rm = TRUE)
xmean
xmedia<- median(x, na.rm = FALSE)
xmedia
# Follow tutorial
df = data[, c("x", "x3")];
head(df)
x<-df$x
head(x)
xmean <- mean(x,na.rm = TRUE)
xmean
xmedia<- median(x, na.rm = FALSE)
xmedia
library(dplyr)
nycflights13::flights
filter(flights, month == 11 | dep_delay <0)
library(dplyr)
nycflights13::flights
filter(flights, month == 11 | dep_delay <0)
filter(flights, dep_delay < 0 )
read.csv("missingLemonade2016.csv")
read.csv("D:/UNI_COURSES/COMP 1810 Data and Web Analytics/R/Draft/missingLemonade2016.csv")
setwd("D:/UNI_COURSES/COMP 1810 Data and Web Analytics/R/Draft")
data <- read.csv("missingLemonade2016.csv")
# Set the working directory
setwd("D:/UNI_COURSES/COMP 1810 Data and Web Analytics/R/Draft")
# Read the CSV file with specified encoding
data <- read.csv("missingLemonade2016.csv", fileEncoding = "UTF-8")
# Display the first few rows of the data
head(data)
# Set the working directory
setwd("D:/UNI_COURSES/COMP 1810 Data and Web Analytics/R/Draft")
# Read the CSV file with specified encoding
data <- read.csv("missingLemonade2016.csv", fileEncoding = "UTF-8")
# Display the first few rows of the data
head(data)
# Set the working directory
setwd("D:/UNI_COURSES/COMP 1810 Data and Web Analytics/R/Draft")
# Read the CSV file with specified encoding
data <- read.csv("missingLemonade2016.csv", fileEncoding = "UTF-8")
# Display the first few rows of the data
head(data)
View(data)
# Set the working directory
setwd("D:/UNI_COURSES/COMP 1810 Data and Web Analytics/R/Draft")
# Read the CSV file with specified encoding
data <- read.csv("missingLemonade2016.csv", fileEncoding = "UTF-8")
# Set the working directory
setwd("D:/UNI_COURSES/COMP 1810 Data and Web Analytics/R/Draft")
# Read the CSV file with specified encoding
data <- read.csv("missingLemonade2016.csv", fileEncoding = "UTF-8")
# Set the working directory
setwd("D:/UNI_COURSES/COMP 1810 Data and Web Analytics/R/Draft")
# Read the CSV file with specified encoding
data <- read.csv("missingLemonade2016.csv", fileEncoding = "ISO-8859-1")
# Set the working directory
setwd("D:/UNI_COURSES/COMP 1810 Data and Web Analytics/R/Draft")
# Read the CSV file with specified encoding
data <- read.csv("missingLemonade2016.csv", fileEncoding = "ISO-8859-1")
View(data)
# Set the working directory
setwd("D:/UNI_COURSES/COMP 1810 Data and Web Analytics/R/Draft")
# Read the CSV file with specified encoding
df <- read.csv("missingLemonade2016.csv", fileEncoding = "ISO-8859-1")
# Set the working directory
setwd("D:/UNI_COURSES/COMP 1810 Data and Web Analytics/R/Draft")
# Read the CSV file with specified encoding
df <- read.csv("missingLemonade2016.csv", fileEncoding = "ISO-8859-1")
View(df)
# Set the working directory
setwd("D:/UNI_COURSES/COMP 1810 Data and Web Analytics/R/Draft")
# Read the CSV file with specified encoding
df <- read.csv("missingLemonade2016.csv", fileEncoding = "ISO-8859-1")
View(df)
# Set the working directory
setwd("D:/UNI_COURSES/COMP 1810 Data and Web Analytics/R/Draft")
# Read the CSV file with specified encoding
df <- read.csv("missingLemonade2016.csv", fileEncoding = "ISO-8859-1")
View(df)
# Set the working directory
setwd("D:/UNI_COURSES/COMP 1810 Data and Web Analytics/R/Draft")
# Read the CSV file with specified encoding
df <- read.csv("missingLemonade2016.csv", fileEncoding = "ISO-8859-1")
View(df)
str(data)
# Get the data type of each column using sapply
column_types <- sapply(data, class)
# Print the data types of each column
print(column_types)
# Set the working directory
setwd("D:/UNI_COURSES/COMP 1810 Data and Web Analytics/R/Draft")
# Read the CSV file with specified encoding
df <- read.csv("missingLemonade2016.csv", fileEncoding = "ISO-8859-1")
a = str(data)
print(a)
# Set the working directory
setwd("D:/UNI_COURSES/COMP 1810 Data and Web Analytics/R/Draft")
# Read the CSV file with specified encoding
data <- read.csv("missingLemonade2016.csv", fileEncoding = "ISO-8859-1")
data_dimensions <- dim(data)
num_rows <- nrow(data)
num_columns <- ncol(data)
# Print the dimensions
cat("The data frame has", num_rows, "rows and", num_columns, "columns.\n")
# Optional: Display a summary of the data frame
summary(data)
# Set the working directory
setwd("D:/UNI_COURSES/COMP 1810 Data and Web Analytics/R/Draft")
# Read the CSV file with specified encoding
data <- read.csv("missingLemonade2016.csv", fileEncoding = "ISO-8859-1")
data_dimensions <- dim(data)
print(data_dimensions)
num_rows <- nrow(data)
num_columns <- ncol(data)
# Print the dimensions
cat("The data frame has", num_rows, "rows and", num_columns, "columns.\n")
# Optional: Display a summary of the data frame
summary(data)
na_counts <- colSums(is.na(data))
# Print the number of NA values for each column
print(na_counts)
# Set the working directory
setwd("D:/UNI_COURSES/COMP 1810 Data and Web Analytics/R/Draft")
# Read the CSV file with specified encoding
data <- read.csv("missingLemonade2016.csv", fileEncoding = "ISO-8859-1")
data_dimensions <- dim(data)
num_rows <- nrow(data)
num_columns <- ncol(data)
# Print the dimensions
cat("The data frame has", num_rows, "rows and", num_columns, "columns.\n")
# Optional: Display a summary of the data frame
summary(data)
str(data)
sapply(my.data, class)
sapply(data, class)
df[df==NA] <- "na"
df
df$Location = ifelse(df$Location == "na" | is.na(df$Location), "Unknown", df$Location)
df
df$Location = ifelse(df$Location == "na" | is.na(df$Location), "Unknown", df$Location)
View(df)
df$Location[is.na(df$Location) | df$Location == "na"] = "unknown"
View(df)
df$Lemon[is.na(df$Location)] = round(mean(df$Lemon))
df$Lemon[is.na(df$Location)] = round(mean(df$Lemon))
View(df)
df$Lemon[is.na(df$Lemon)] = round(mean(df$Lemon), na.rm = TRUE)
df$Lemon[is.na(df$Lemon)] = round(mean(df$Lemon), na.rm = TRUE)
df$Lemon[is.na(df$Lemon)] = round(mean(df$Lemon), na.rm = TRUE)
df$Lemon[is.na(df$Lemon)] = round(mean(df$Lemon), na.rm = TRUE)
df$Lemon[is.na(df$Lemon)] <- round(mean(df$Lemon, na.rm = TRUE))
View(df)
df$Orange[is.na(df$Orange) | df$Orange == "na" | df$Orange == ""] = 0
df$Orange[is.na(df$Orange) | df$Orange == "na" | df$Orange == ""] = 0
df$Orange[df$Orange == 0] = round(median(df$Orange))
df$Orange[is.na(df$Orange) | df$Orange == "na" | df$Orange == ""] = 0
df$Orange[df$Orange == 0] = round(median(df$Orange, na.rm = TRUE))
as.integer(df$Orange)
df$Orange[is.na(df$Orange) | df$Orange == "na" | df$Orange == ""] = 0
df$Orange[df$Orange == 0] = round(median(df$Orange, na.rm = TRUE))
as.integer(df$Orange)
df$Orange[is.na(df$Orange) | df$Orange == "na" | df$Orange == ""] = 0
df$Orange[df$Orange == 0] = round(median(df$Orange, na.rm = TRUE))
df$Orange <- as.numeric(df$Orange)  # Convert "Orange" column to numeric
df$Orange[is.na(df$Orange) | df$Orange == "na" | df$Orange == ""] = 0
df$Orange[df$Orange == 0] = round(median(df$Orange, na.rm = TRUE))
View(df)
df$Orange <- as.numeric(df$Orange)  # Convert "Orange" column to numeric
df$Orange[is.na(df$Orange) | df$Orange == "na" | df$Orange == ""] = 0
df$Orange[df$Orange == 0] = round(median(df$Orange, na.rm = TRUE))
View(df)
df$Total.Sales[is.na(df$Total.Sales)] = (df$Orange + df$Lemon)
View(df)
df$Price[df$Price == "--"] = df[i-1]
df$Total.Sales[is.na(df$Total.Sales)] = (df$Orange + df$Lemon)
df$Price[df$Price == "--"] = df$Price[i-1]
df$Price[df$Price == "--"] = df$Price[i-1]
View(df)
df$Price[df$Price == "--" | is.na(df$Price)] = df$Price[i-1]
View(df)
df$Price[df$Price == "--" | is.na(df$Price)] = df$Price[i-1]
View(df)
df$Total.Sales[is.na(df$Total.Sales)] = (df$Orange + df$Lemon)
df$Revenue = "$" + df$Total.Sales * df$Price
df$Price[df$Price == "--" | is.na(df$Price)] = df$Price[i-1]
index = which(df$Price == NA)
df$Price[index] = df$Price[index-1]
View(df)
df$Price[df$Price == "--" | is.na(df$Price)] = df$Price[i-1]
index = which(df$Price == NA)
print(index)
df$Price[index] = df$Price[index-1]
View(df)
df$Price[df$Price == "--" | is.na(df$Price)] = df$Price[i-1]
indexes = which(is.na(df$Price))
df$Price[index] = df$Price[index-1]
View(df)
df$Price[df$Price == "--" | is.na(df$Price)] = df$Price[i-1]
indexes = which(is.na(df$Price))
print(indexes)
df$Price[index] = df$Price[index-1]
View(df)
df$Price[df$Price == "--" | is.na(df$Price)] = df$Price[i-1]
indexes = which(is.na(df$Price))
print(indexes)
df$Price[indexes] = df$Price[index-1]
df$Price[df$Price == "--" | is.na(df$Price)] = df$Price[i-1]
indexes = which(is.na(df$Price))
print(indexes)
df$Price[indexes] = df$Price[index-1]
df$Price[df$Price == "--" | is.na(df$Price)] = df$Price[i-1]
indexes = which(is.na(df$Price))
print(indexes)
df$Price[indexes] = df$Price[indexes-1]
View(df)
df$Total.Sales[is.na(df$Total.Sales)] = (df$Orange + df$Lemon)
df$Revenue = "$" + df$Total.Sales * df$Price
# Check the data types of df$Total.Sales and df$Price
class(df$Total.Sales)
class(df$Price)
# Convert df$Total.Sales and df$Price to numeric if they are not already
df$Total.Sales <- as.numeric(df$Total.Sales)
df$Price <- as.numeric(df$Price)
# Check if there are any NA or non-numeric values in df$Total.Sales and df$Price after conversion
sum(is.na(df$Total.Sales))
sum(is.na(df$Price))
# If there are non-numeric values, handle them appropriately (e.g., remove them or impute them)
# Now calculate Revenue
df$Revenue <- "$" + (df$Total.Sales * df$Price)
# Check the data types of df$Total.Sales and df$Price
class(df$Total.Sales)
class(df$Price)
# Convert df$Total.Sales and df$Price to numeric if they are not already
df$Total.Sales <- as.numeric(df$Total.Sales)
df$Price <- as.numeric(df$Price)
# Check if there are any NA or non-numeric values in df$Total.Sales and df$Price after conversion
sum(is.na(df$Total.Sales))
sum(is.na(df$Price))
# If there are non-numeric values, handle them appropriately (e.g., remove them or impute them)
# Calculate Revenue
df$Revenue <- paste("$", df$Total.Sales * df$Price)
# View the dataframe
View(df)
# Check the data types of df$Total.Sales and df$Price
class(df$Total.Sales)
class(df$Price)
# Convert df$Total.Sales and df$Price to numeric if they are not already
df$Total.Sales <- as.numeric(df$Total.Sales)
df$Price <- as.numeric(df$Price)
# Check if there are any NA or non-numeric values in df$Total.Sales and df$Price after conversion
sum(is.na(df$Total.Sales))
sum(is.na(df$Price))
# If there are non-numeric values, handle them appropriately (e.g., remove them or impute them)
# Calculate Revenue
df$Revenue <- paste("$", df$Total.Sales * df$Price)
rev = class(df$Revenue)
print(rev)
# View the dataframe
View(df)
install.packages(&quot;tidyverse&quot;)
install.packages
install.packages("tidyverse")
